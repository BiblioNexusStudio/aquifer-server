# This workflow runs automatically on pushes to master that affect Jobs and its dependencies.
# It can also be run manually via workflow_dispatch. It uses check-if-branch-should-deploy
# to prevent cluttering the deployments list with initial release-hotfix- branches.
#
# It follows a build-then-deploy pattern:
# 1. Build: Compiles the Jobs project and upload as artifact
# 2. Deploy to Dev/QA: Download artifact and deploy
# 3. Deploy to Production: Download artifact and deploy
#
# Note: Environment deployments require approval through GitHub environment protection rules

name: Post-merge (Jobs)

on:
    push:
        branches:
            - master
            - 'release-hotfix-*'
        paths:
            - '.github/actions/**'
            - '.github/workflows/**'
            - 'Directory.Build.props'
            - 'Directory.Packages.props'
            - 'src/Aquifer.AI/**'
            - 'src/Aquifer.Common/**'
            - 'src/Aquifer.Data/**'
            - 'src/Aquifer.JSEngine/**'
            - 'src/Aquifer.Jobs/**'
            - 'src/Aquifer.Tiptap/**'
    workflow_dispatch:

permissions:
    id-token: write
    contents: write

jobs:
    check_should_deploy:
        runs-on: windows-latest
        outputs:
            should_deploy: ${{ github.event_name == 'workflow_dispatch' || steps.check_deploy.outputs.should_deploy == 'true' }}
        steps:
            - id: check_deploy
              if: github.event_name != 'workflow_dispatch'
              uses: BiblioNexusStudio/github-actions/check-if-branch-should-deploy@master
              with:
                  current_branch: ${{ github.ref_name }}

    build:
        name: Build
        needs:
            - check_should_deploy
        if: needs.check_should_deploy.outputs.should_deploy == 'true'
        runs-on: windows-latest
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4.2.2
            - name: Setup .NET
              uses: actions/setup-dotnet@v4.3.0
              with:
                  global-json-file: "./global.json"
                  cache: true
                  cache-dependency-path: "Directory.Packages.props"
            - name: Restore NuGet packages
              run: dotnet restore
            - name: Restore .net tools
              run: dotnet tool restore
            - name: Build Solution
              run: dotnet build --configuration Release --no-restore
            - name: Make build and temp directories
              run: |
                  mkdir ./build
                  mkdir ./temp
            - name: Create Jobs deployment artifact
              run: |
                cd src/Aquifer.Jobs
                dotnet build --output ../../build --configuration Release --no-restore
                cd ../..
            - name: Bundle migrations
              run: dotnet ef migrations bundle --startup-project src/Aquifer.Migrations --project src/Aquifer.Data --context AquiferDbContext --output build/Migrate.exe --self-contained --no-build
            - name: Download ffmpeg from Azure Blob Storage
              uses: armanrahman22/azblob-download-action@v0.0.4
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}
                  storage-account-name: "aquiferstoragedev"
                  container-name: "deployment-artifacts"
                  blob-name: "ffmpeg.zip"
                  download-path: "./temp"
            - name: Unzip ffmpeg into build folder
              run: |
                mkdir ./build/lib
                Expand-Archive -Path "./temp/ffmpeg.zip" -DestinationPath "./build/lib"
                rm ./temp -r
            - name: Publish deployment artifact
              uses: actions/upload-artifact@v4.6.1
              with:
                  include-hidden-files: true
                  name: build
                  path: build

    deploy_jobs_to_dev_qa:
        if: needs.check_should_deploy.outputs.should_deploy == 'true'
        name: Deploy Jobs to dev/qa
        runs-on: windows-latest
        needs:
            - build
            - check_should_deploy
        environment:
            name: dev-qa-jobs
        steps:
            - name: Notify Slack deploy is starting
              id: slack-notify
              uses: BiblioNexusStudio/github-action-slack-notify-build@main
              with:
                  channel_id: C05UPTGQGP9
                  status: RUNNING
                  color: warning
                  environment: dev-qa-jobs
                  default_branch_name: master
                  service_name: Jobs (East US)
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
            - uses: actions/download-artifact@v4.1.9
              with:
                  name: build
                  path: build
            - name: Login to Azure
              uses: azure/login@v2.2.0
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}
            - name: Run migrations
              run: |
                ./build/Migrate.exe --connection '${{ vars.DB_CONNECTION_URL_DEV_QA }}'
                rm ./build/Migrate.exe
            - name: Deploy Jobs to dev/qa
              uses: Azure/functions-action@v1.5.2
              with:
                  app-name: ${{ vars.AZURE_FUNCTION_APP_NAME_DEV_QA }}
                  package: build
            - name: Notify Slack deploy status
              if: ${{ !cancelled()  }}
              uses: BiblioNexusStudio/github-action-slack-notify-build@main
              with:
                  channel_id: C05UPTGQGP9
                  status: ${{ job.status == 'failure' && 'FAILURE' || 'SUCCESS' }}
                  color: ${{ job.status == 'failure' && 'danger' || 'good' }}
                  environment: dev-qa-jobs
                  default_branch_name: master
                  service_name: Jobs
                  message_id: ${{ steps.slack-notify.outputs.message_id }}
              env:
                    SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}

    deploy_jobs_to_prod:
        if: needs.check_should_deploy.outputs.should_deploy == 'true'
        name: Deploy Jobs to prod
        runs-on: windows-latest
        needs:
            - build
            - check_should_deploy
        environment:
            name: prod-jobs
        steps:
            - name: Notify Slack deploy is starting
              id: slack-notify
              uses: BiblioNexusStudio/github-action-slack-notify-build@main
              with:
                  channel_id: C05UPTGQGP9
                  status: RUNNING
                  color: warning
                  environment: prod-jobs
                  default_branch_name: master
                  service_name: Jobs
              env:
                  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
            - uses: actions/download-artifact@v4.1.9
              with:
                  name: build
                  path: build
            - name: Login to Azure
              uses: azure/login@v2.2.0
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}
            - name: Run migrations
              run: |
                ./build/Migrate.exe --connection '${{ vars.DB_CONNECTION_URL_PROD }}'
                rm ./build/Migrate.exe
            - name: Deploy Jobs to prod
              uses: Azure/functions-action@v1.5.2
              with:
                  app-name: ${{ vars.AZURE_FUNCTION_APP_NAME_PROD }}
                  package: build
            - name: Notify Slack deploy status
              if: ${{ !cancelled()  }}
              uses: BiblioNexusStudio/github-action-slack-notify-build@main
              with:
                  channel_id: C05UPTGQGP9
                  status: ${{ job.status == 'failure' && 'FAILURE' || 'SUCCESS' }}
                  color: ${{ job.status == 'failure' && 'danger' || 'good' }}
                  environment: prod-jobs
                  default_branch_name: master
                  service_name: Jobs (East US)
                  message_id: ${{ steps.slack-notify.outputs.message_id }}
              env:
                    SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
                    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                    LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}


# This workflow runs automatically on pushes to master that affect Public API and its dependencies.
# It can also be run manually via workflow_dispatch. It uses check-if-branch-should-deploy
# to prevent cluttering the deployments list with initial release-hotfix- branches.
#
# It follows a build-then-deploy pattern:
# - Build: Compiles the Public API project and upload as artifact
#     - Deploy to Dev: Download artifact and deploy
#     - Deploy to QA: Download artifact and deploy
#     - Deploy to Production: Download artifact and deploy
#
# Note: Environment deployments require approval through GitHub environment protection rules

name: Post-merge (Public API)

on:
    push:
        branches:
            - master
            - 'release-hotfix-*'
        paths:
            - '.github/actions/**'
            - '.github/workflows/**'
            - 'Directory.Build.props'
            - 'Directory.Packages.props'
            - 'src/Aquifer.AI/**'
            - 'src/Aquifer.Common/**'
            - 'src/Aquifer.Data/**'
            - 'src/Aquifer.JSEngine/**'
            - 'src/Aquifer.Public.API/**'
            - 'src/Aquifer.Tiptap/**'
    workflow_dispatch:

permissions:
    id-token: write
    contents: write
    deployments: read
    pull-requests: read

jobs:
    check_should_deploy:
        runs-on: ubuntu-latest
        outputs:
            should_deploy: ${{ github.event_name == 'workflow_dispatch' || steps.check_deploy.outputs.should_deploy == 'true' }}
        steps:
            - id: check_deploy
              if: github.event_name != 'workflow_dispatch'
              uses: BiblioNexusStudio/github-actions/check-if-branch-should-deploy@master
              with:
                  current_branch: ${{ github.ref_name }}

    build:
        needs:
            - check_should_deploy
        if: needs.check_should_deploy.outputs.should_deploy == 'true'
        name: Build
        runs-on: ubuntu-latest
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4.2.2
            - name: Setup .NET
              uses: actions/setup-dotnet@v4.3.0
              with:
                  global-json-file: "./global.json"
                  cache: true
                  cache-dependency-path: "Directory.Packages.props"
            - name: Restore NuGet packages
              run: dotnet restore --runtime win-x64
            - name: Restore CLI tools
              run: dotnet tool restore
            - name: Build Solution
              run: dotnet build --configuration Release --runtime win-x64 --no-restore
            - name: Make build directory
              run: mkdir ./build
            - name: Create Aquifer Public API deployment artifact
              run: dotnet publish src/Aquifer.Public.API --output ./Aquifer.Public.API --configuration Release --runtime win-x64 --self-contained --no-build
            - name: Zip deployment artifact
              run: cd ./Aquifer.Public.API && zip ../build/Build.zip *
            - name: Bundle migrations
              run: dotnet ef migrations bundle --startup-project src/Aquifer.Migrations --project src/Aquifer.Data --context AquiferDbContext --output build/Migrate --self-contained --no-build
            - name: Publish deployment artifact
              uses: actions/upload-artifact@v4.6.1
              with:
                  include-hidden-files: true
                  name: build
                  path: build

    deploy_public_api_to_dev:
        if: needs.check_should_deploy.outputs.should_deploy == 'true'
        name: Deploy Public API to dev
        runs-on: ubuntu-latest
        needs:
            - build
            - check_should_deploy
        environment:
            name: dev-public
            url: ${{ vars.URL_DEV }}
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4.2.2
            - uses: ./.github/actions/deploy-to-env
              id: deploy
              with:
                  environment: dev
                  connection-url: ${{ vars.DB_CONNECTION_URL_DEV }}
                  web-app-name: ${{ vars.AZURE_WEB_APP_NAME_PUBLIC_DEV }}
                  resource-group: ${{ vars.AZURE_RESOURCE_GROUP_DEV }}
                  azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
                  azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                  azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    deploy_public_api_to_qa:
        if: needs.check_should_deploy.outputs.should_deploy == 'true'
        name: Deploy Public API to qa
        runs-on: ubuntu-latest
        needs:
            - build
            - check_should_deploy
        environment:
            name: qa-public
            url: ${{ vars.URL_QA }}
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4.2.2
            - uses: ./.github/actions/deploy-to-env
              id: deploy
              with:
                  environment: qa
                  full-environment: qa-public
                  connection-url: ${{ vars.DB_CONNECTION_URL_QA }}
                  web-app-name: ${{ vars.AZURE_WEB_APP_NAME_PUBLIC_QA }}
                  resource-group: ${{ vars.AZURE_RESOURCE_GROUP_QA }}
                  azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
                  azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                  azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  linear-api-key: ${{ secrets.LINEAR_API_KEY }}
                  slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
                  service-name: Public API (East US)

    deploy_public_api_to_prod_east_us:
        if: needs.check_should_deploy.outputs.should_deploy == 'true'
        name: Deploy Public API to prod (East US)
        runs-on: ubuntu-latest
        needs:
            - build
            - check_should_deploy
        environment:
            name: prod-public
            url: ${{ vars.URL_PROD }}
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4.2.2
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
            - uses: ./.github/actions/deploy-to-env
              id: deploy
              with:
                  environment: prod
                  full-environment: prod-public
                  connection-url: ${{ vars.DB_CONNECTION_URL_PROD }}
                  web-app-name: ${{ vars.AZURE_WEB_APP_NAME_PUBLIC_PROD }}
                  resource-group: ${{ vars.AZURE_RESOURCE_GROUP_PROD }}
                  azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
                  azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                  azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  linear-api-key: ${{ secrets.LINEAR_API_KEY }}
                  slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
                  service-name: Public API (East US)

    deploy_public_api_to_prod_central_india:
        if: needs.check_should_deploy.outputs.should_deploy == 'true'
        name: Deploy Public API to prod (Central India)
        runs-on: ubuntu-latest
        needs:
            - build
            - check_should_deploy
        environment:
            name: prod-public
            url: ${{ vars.URL_PROD }}
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4.2.2
              with:
                  ref: ${{ github.event.pull_request.head.sha }}
            - uses: ./.github/actions/deploy-to-env
              id: deploy
              with:
                  environment: prod
                  full-environment: prod-public
                  web-app-name: ${{ vars.AZURE_WEB_APP_NAME_PUBLIC_PROD_INDIA }}
                  resource-group: ${{ vars.AZURE_RESOURCE_GROUP_PROD_INDIA }}
                  azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
                  azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
                  azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  linear-api-key: ${{ secrets.LINEAR_API_KEY }}
                  slack-bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
                  service-name: Public API (Central India)

    delete_hotfix_branch:
        if: needs.check_should_deploy.outputs.should_deploy == 'true'
        name: Delete Hotfix Branch
        runs-on: ubuntu-latest
        needs:
            - build
            - check_should_deploy
            - deploy_public_api_to_prod_east_us
            - deploy_public_api_to_prod_central_india
        steps:
            - uses: BiblioNexusStudio/github-actions/delete-hotfix-branch@master
              with:
                  current_branch: ${{ github.ref_name }}
                  app_id: ${{ secrets.BIBLIONEXUS_BOT_APP_ID }}
                  private_key: ${{ secrets.BIBLIONEXUS_BOT_PRIVATE_KEY }}
